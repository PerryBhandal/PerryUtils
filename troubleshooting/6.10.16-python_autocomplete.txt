Having issues with YCM's auto complete being done from pwd. For example:

Have this layout:

Application.py
esl/
	SomeClass
	net/
		json_helpers.py


Suppose json_helpers.py contains a function "to_json".

In Application.py if we do from esl.net it's going to autocomplete json helpers and show to_json as an autocomplete option which is *not* done simply based on ID -- i.e. it's not simply pulling the ID from some buffer, instead it actually views those IDs as their appropriate types.

Now if SomeClass were to attempt the same import ("from esl.net") it's not going to show any intelligent autocompletion, it'll simply show IDs from buffers.

I think the reason it works in the case of Application is because the import we do is relative to the file itself. So if you ever do an import from your base directory (Application is in the base) that relative path you provide (relative to the src root, that is) YCM hits the right file. On the other hand, in the case of SomeClass we need to do imports relative to its location to get autocomplete working. So if SomeClass does "from esl.net" it's attempting to load from esl/esl/net which is, of course, not a valid path.


** Possible solution (6/10/16)

When you do your imports as relative to a file itself the autocomplete works. E.g. in admin_pages if you do "esl.net" it maps to pages/esl/net which isn't valid, so autocomplete does not work. If, however, you do "import ..esl.net" it then works because that maps to "../esl/net". Given that admin_pages is in pages we need to go up one directory, thne go into esl/net,that's what the relative import lets us do.

The solution is still messy because absolute paths are preferable. Is there any way to make this work regardless of directory structure?

** Attempted fix 1: Add the client folder into your path when launching vim.

This doesn't work. Verified that I was in the client directory for all windows (using lcd) but autocomplete still didn't work in admin_pages but continued working in Application.

** Attempted fix 2: Create a symlink to the relevant folders inside the venv's site-packages.

This didn't work either.


** Attempted fix 3: Make a reference to the files relative to the src folder.

[THIS WORKS!]

from esl.net.data_service import DataService
from client.esl.net.data_service import DataService

The top one (with no client prefix) doesn't work, the one below (with the client prefix) does.

So for now to fix this just fully qualify your package imports relative to the src directory (or, well, at least in cases like Swatch where you have client and server split into separate packages from the same base directory (src/).

TODO [0]: Why does this work? How does YCM realize that the client folder is relative to source?


****** Far better solution.

This is almost certainly related to a path issue. The problem appears as soon as esl isn't in our root path (via site-packages) and it disappears once we add everything from inside src into the site-packages.

So begin symlinking everything from src in, here's an example:

(venv)perry@perry-zenbook ~/work/git/swatch/venv/lib/python2.7/site-packages $ ln -s  ../../../../src/* .

So notice that you're in the venv site-packages folder. In there you run that symbolic link command (recall that the path is relative to where the symlink will be located).

Only downside with this is you need to do it each time you create a new folder in src (only at that top directory, nested ones are fine [e.g. src/client/new_directory would not need to be added explicitly) but src/new_directory would.
