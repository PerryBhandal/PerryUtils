*** Run this script:
sudo apt-get remove --purge vim vim-runtime vim-gnome vim-tiny vim-common vim-gui-common

sudo apt-get build-dep vim-gnome
 
sudo apt-get install liblua5.1-dev luajit libluajit-5.1 python-dev ruby-dev libperl-dev libncurses5-dev libgnome2-dev libgnomeui-dev libgtk2.0-dev libatk1.0-dev libbonoboui2-dev libcairo2-dev libx11-dev libxpm-dev libxt-dev

sudo rm -rf /usr/local/share/vim

sudo rm /usr/bin/vim
 
sudo mkdir /usr/include/lua5.1/include
sudo mv /usr/include/lua5.1/*.h /usr/include/lua5.1/include/
 
sudo ln -s /usr/bin/luajit-2.0.0-beta9 /usr/bin/luajit
 
cd ~
git clone https://github.com/vim/vim
git checkout v.8.0.0055
cd vim/src
make distclean
./configure --with-features=huge \
            --enable-rubyinterp \
            --enable-largefile \
            --disable-netbeans \
            --enable-pythoninterp \
            --with-python-config-dir=/usr/lib/python3.4/config \
            --enable-perlinterp \
            --enable-luainterp \
            --with-luajit \
	    --enable-gui=auto \
            --enable-fail-if-missing \
            --with-lua-prefix=/usr/include/lua5.1 \
            --enable-cscope 
make 
sudo make install

Once the above is done ensure you have an alias for "vim -g" called gvim. Should already be in the home dot files, but verify to be sure.


** *** Install Vundle plugin manager

git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim

** If you get an error with YCM on startup

Had issues with 484 annotations and YCM when editing a file called test.py. Switched name and it worked fine -- has something to do with imports/name clashing. See:

https://github.com/Valloric/YouCompleteMe/issues/2332

** Upgrade cmake

Note that Jedi for python3 (including pep484 annotation based completions) doesn't work unless you run jedi via Python3. The problem is that even if you compile vim with python3 YCM's completer still uses python2 when running Jedi.

To resolve it you need to:

1) Install python3-dev

2) Upgrade your cmake from ~2.8 to ~3.2 (otherwise you'll get an error about python include dirs). Use this PPA for the cmake portion:

sudo apt-get install software-properties-common; sudo add-apt-repository ppa:george-edison55/cmake-3.x; sudo apt-get update; sudo apt-get upgrade cmake

TODO [0]: Can we just upgrade a single package or do we need to do apt-get upgrade and let everything hit?)

3) Now you can compile the YCM completer using Python. In the YCM dir run python3.5 (or whatever python you want to use) install.py --all. 

4) The final step (this is already done in your stored vimrc) is to specify that python3 be used as your interpreter for YCM:

let g:ycm_python_binary_path = 'python3'

This step solves the "dynamic module does not define init function (PyInit_ycm_core)" error.

**** Install YCM auto completion

1) Ensure development tools and cmake are installed (sudo apt-get install build-essential cmake)
2) Have python headers installed (sudo apt-get install python3-dev)
3) Compile with support for C languages:

cd ~/.vim/bundle/YouCompleteMe
./install.sh --clang-completer

Note: You'll want to have a default .ycm_extra_conf.py that's stored in ~ so that you don't get pesky messages about YCM not having a config file even for projects you don't want YCM active for. copyTo.sh copies the default one that's stored in this folder.

*** Language specific packages

C/C++ 
--
Plugin page: http://www.vim.org/scripts/script.php?script_id=213
Hotkeys: http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf

Ruby
--
Ensure that the ruby-lint gem is installed in your core Ruby install.

Tags
--
Ensure exhuberant tags is installed (need it for tagbar). ctags is package name.

evince
--
evince is needed for previewing PDFs (apt-get install evince)

Packages
--
sudo apt-get install ctags evince texlive-full

--

Add javascript auto completion

Ensure npm and nodejs are installed.

Do plugininstall (to install ternjs/tern_for_vim', then go to ~/.vim/bundle/tern and run npm install. This will install tern.

Ensure that within your folder you have a .tern-project file, here's one for a node app:

{
	"libs":["jquery", "browser"],

	"plugins": {
	"node": {}
	}

}

Here is a more complete tern project file

{
  "defs": [
    "browser",
    "ecma5",
    "ecma6"
  ]
}

--

Add javascript linting/hinting

Run sudo npm install -g jshint

Should work with syntastic right out of the box.

-- 

Fix python auto complete when using venv

Found this post:

https://github.com/davidhalter/jedi-vim/issues/31

if has('python')
py << EOF
import os.path
import sys
import vim
if 'VIRTUAL_ENV' in os.environ:
    project_base_dir = os.environ['VIRTUAL_ENV']
    sys.path.insert(0, project_base_dir)
    activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
    execfile(activate_this, dict(__file__=activate_this))
EOF
endif

Above has to go into .vimrc (not into the python ftplugin file). Already have it in there, but also dumping it here given how important it is.

-- 

neovim

Install it from unstable ppa: https://github.com/neovim/neovim/wiki/Installing-Neovim

Symlink your vim config to neovim

To start the transition, link your previous configuration so Nvim can use
it:

mkdir -p ${XDG_CONFIG_HOME:=$HOME/.config}; ln -s ~/.vim $XDG_CONFIG_HOME/nvim; ln -s ~/.vimrc $XDG_CONFIG_HOME/nvim/init.vim

add python support for nvim:

pip install neovim

***** Misc fixes

*Tern

- Make sure you have tern installed system wide. Also go into ~/.vim/bundle/tern_for_vim and run npm install

---

Ensure vimproc is installed for typescript specific tools. To install it go into ~/.vim/bundle/vimproc.vim and run make. Note, have to do this after you've done PluginInstall.

******************************
DEPRECATED


**** Compile vim from source [DEPRECATED]

https://github.com/Valloric/YouCompleteMe/wiki/Building-Vim-from-source

Few notes about this:
- In step 3, do everything EXCLUDING make VIMRUNTIMEDIR (and beyond). You'll do checkinstall there.
- Use checkinstall instead of make (so replace sudo make install with sudo checkinstall).
- Do not do any of the update-alternatives stuff and beyond. The above handles setting up gvim and vim, and you can handle file associations on a per-extension basis.

